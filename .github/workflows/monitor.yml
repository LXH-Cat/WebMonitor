# 工作流名称
name: Website Change Monitor

on:
  # 定时触发：使用 cron 语法，默认为 UTC+8 时区的 00:00, 06:00, 12:00, 18:00
  schedule:
    - cron: '0 */1 * * *'
  
  # 推送时触发：修改 config.yml 配置文件时触发该工作流
  push:
    paths:
      - 'config.yml'

  # 手动触发：允许你在 GitHub Actions 页面手动运行此工作流
  workflow_dispatch:

jobs:
  monitor-and-commit:
    # 运行环境
    runs-on: ubuntu-latest
    
    # 将所有需要的 secrets 和 variables 传递给 Python 脚本作为环境变量
    env:
      # --- 敏感信息 (存放于 Secrets) ---
      WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
      SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}

      # --- 普通配置 (存放于 Variables, 方便修改) ---
      WEBHOOK_CUSTOM_PAYLOAD: ${{ vars.WEBHOOK_CUSTOM_PAYLOAD }}
      MAIL_FROM: ${{ vars.MAIL_FROM }}
      MAIL_SENDER_NAME: ${{ vars.MAIL_SENDER_NAME }}
      SMTP_HOST: ${{ vars.SMTP_HOST }}
      SMTP_PORT: ${{ vars.SMTP_PORT }}
      SMTP_USER: ${{ vars.SMTP_USER }}
      MAIL_RECIPIENTS: ${{ vars.MAIL_RECIPIENTS }}

    steps:
      # 步骤1：检出代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 步骤2：设置 Python 环境
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # 步骤3：安装依赖库
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests pyyaml

      # 步骤4：运行监控脚本
      - name: Run website monitor script
        id: monitor
        run: python monitor.py

      # 步骤5：提交变更 (若有)
      - name: Commit and push if changes were found
        if: steps.monitor.outputs.changes_detected == 'true'
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add snapshots/
          # 检查是否有文件被暂存
          if ! git diff --staged --quiet; then
            # 使用 Python 脚本生成的带有时间戳的 commit message
            git commit -m "${{ steps.monitor.outputs.commit_message }}"
            git push
          else
            echo "文件无变更，无需提交。"
          fi
